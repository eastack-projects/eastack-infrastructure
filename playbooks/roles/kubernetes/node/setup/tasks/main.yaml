---
- name: Extract kubernetes package
  unarchive:
    src: "{{ KUBERNETES_NODE_PACKAGE }}"
    dest: /opt/kubernetes/package
    creates: /opt/kubernetes/package/node
    extra_opts: [ "--strip-components=1" ]

- name: Install kubelet and kube-proxy
  copy:
    src: "/opt/kubernetes/package/node/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    remote_src: yes
    mode: 0755
  with_items:
    - kubelet
    - kube-proxy

- name: Add kubernetes node basic service
  copy:
    src: "{{ item }}"
    dest: "/lib/systemd/system/{{ item }}"
    mode: 0644
  with_items:
    - kubelet.service
    - kube-proxy.service

- name: Add kubernetes node custom service
  template:
    src: "{{ item.src }}"
    dest: "/etc/systemd/system/{{ item.dest }}.service.d/10-{{ item.dest }}.conf"
    mode: 0644
  with_items:
    - { src: kubelet.service.j2, dest: kubelet }
    - { src: kube-proxy.service.j2, dest: kube-proxy }

- name: Copy kubelet config file
  template:
    src: "{{ item.src }}"
    dest: "/var/lib/kubelet/{{ item.dest }}"
    mode: 0644
  with_items:
    - { src: kubelet-config.yaml.j2, dest: config.yaml }
    - { src: kubelet-flags.env.j2, dest: kubelet-flags.env }

- name: Slurp vault_int_ca.crt
  slurp:
    src: "{{ VAULT_CERT_DIR }}/{{ INT_CERT_NAME }}"
  register: int_crt
  delegate_to: vault

- name: Slurp kube-proxy-apiserver-client.crt
  slurp:
    src: "/opt/kubernetes/tls/kube-proxy-apiserver-client.crt"
  register: kube_proxy_apiserver_client_crt

- name: Slurp kube-proxy-apiserver-client.key
  slurp:
    src: "/opt/kubernetes/tls/kube-proxy-apiserver-client.key"
  register: kube_proxy_apiserver_client_key

- name: Copy kube-proxy config file
  template:
    src: "{{ item.src }}"
    dest: "/var/lib/kube-proxy/{{ item.dest }}"
    mode: 0644
  with_items:
    - { src: kube-proxy-config.yaml.j2, dest: config.yaml }
    - { src: kubeconfig.conf.j2, dest: kubeconfig.conf }

- name: Copy CA certificate
  copy:
    content: "{{ int_crt['content'] | b64decode }}"
    dest: /opt/kubernetes/tls/ca.crt

- name: Pull Pause docker image
  docker_image:
    name: "registry.aliyuncs.com/google_containers/pause:{{ PAUSE_VERSION }}"
    repository: "k8s.gcr.io/pause:{{ PAUSE_VERSION }}"
    source: pull

- name: Pull nginx ingress docker image
  docker_image:
    name: "registry.cn-hangzhou.aliyuncs.com/google_containers/nginx-ingress-controller:{{ INGRESS_VERSION }}"
    repository: "k8s.gcr.io/ingress-nginx/controller:{{ INGRESS_VERSION }}"
    source: pull

- include_tasks: cni.yaml

- name: Enable and restart kubelet and kube-proxy service
  systemd:
    name: "{{ item }}"
    state: restarted
    enabled: yes
  with_items:
    - kube-proxy
    - kubelet
